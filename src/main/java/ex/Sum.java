package ex;

/*Задача 1
Практика ООП. Исключения #1. NumberFormatException
Необходимо написать приложение, которое принимает набор чисел в качестве параметров командной строки, складывает их и результат выводит в консоль. Формат запуска приложения следующий:

java Sum 10 34 1
здесь Sum название класса, а числа после него будут переданы в массив строк, указанный в параметрах метода main. Таким образом, метод main принимает массив строк, в каждом из которых записано число. Необходимо эти числа преобразовать в тип double с использованием Double.parseDouble(), а затем сложить их между собой. Метод parseDouble выкидывает исключение NumberFormatException в случае, если вместо числа было передано что-то иное. Обработайте данное исключение и все строки, не являющиеся числами, считайте за 0.

Пример:
java Sum 10 3qq4 1
результат: 11*/

public class Sum {
    public static void main(String[] args) {
        double sum = 0;

/*Задача 2
        Практика ООП. Исключения #2. Необрабатываемые исключения
        Исключение
        NumberFormatException относится к unchecked типу, то есть его логика
        говорит о том, что необходимо не обрабатывать его, а предотвратить его
        появление. Перепишите приложение из задания #1 таким образом, чтобы
        обрабатывать исключение не требовалось.*/

        for (String arg : args) {
            if (isValidNumber(arg)) {
                double number = Double.parseDouble(arg);
                sum += number;
            }
        }

        System.out.println("Результат: " + sum);
    }

        //является ли строка валидным числом типа double
        private static boolean isValidNumber(String str) {
            if (str == null || str.isEmpty()) {
                return false;
            }
        //допустимые форматы чисел
        return str.matches("-?\\d+(\\.\\d+)?([eE][-+]?\\d+)?");
    }
}